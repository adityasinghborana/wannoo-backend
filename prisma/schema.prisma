generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  address       String?
  age           Int?
  dob           DateTime?
  isUser        Boolean         @default(true)
  uid           String          @unique
  username      String?
  profileImage String?
  bookingDetail BookingDetail[]
  favorites     FavoriteTour[]
  itineraries   UserItinarary[]
}

model BookingDetail {
  id           Int            @id @default(autoincrement())
  status       String
  fullName     String
  email        String
  passengers   Int?
  tourDate     String?
  serviceTotal Float?
  userId       String         @db.VarChar(255)
  user         User           @relation(fields: [userId], references: [uid] ,onDelete: Cascade)
  role         Roles?         @relation(fields: [roleId], references: [uid],onDelete: Cascade)
  roleId       String?        @db.VarChar(255)
  tourId       Int
  tour         Tourstaticdata @relation(fields: [tourId], references: [tourId], name: "TourBookings",onDelete: Cascade)
  createdAt    DateTime       @default(now())
}

model TimeSlot {
  id           Int        @id @unique @default(autoincrement())
  tourOptionId Int
  timeSlotId   String
  timeSlot     String
  available    Int
  adultPrice   Float
  childPrice   Float
  tourOption   TourOption @relation(fields: [tourOptionId], references: [tourOptionId] ,onDelete: Cascade)

  @@index([tourOptionId], map: "TimeSlot_tourOptionId_fkey")
}

model Continent {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  image     String?
  countries Country[]
}

model Country {
  CountryId   Int       @id @default(autoincrement())
  name        String
  continentId Int
  image       String?
  cities      City[]
  continent   Continent @relation(fields: [continentId], references: [id])

  @@index([continentId], map: "Country_continentId_fkey")
}

model City {
  id        Int              @id @default(autoincrement())
  CityName  String
  countryId Int
  country   Country          @relation(fields: [countryId], references: [CountryId])
  event     Eventdata[]
  tours     Tourstaticdata[]

  @@index([countryId], map: "City_countryId_fkey")
}

model Tourtypes {
  id           Int    @id @default(autoincrement())
  cityTourType String @unique
  image        String?
}

model Tourstaticdata {
  id                        Int                 @id @default(autoincrement())
  tourId                    Int                 @unique
  continent                 String
  countryId                 Int
  countryName               String
  cityId                    Int
  cityName                  String
  tourName                  String              @unique
  duration                  String?
  imagePath                 String
  cityTourTypeId            String
  cityTourType              String
  Alwaysavailable           Boolean             @default(true)
  Startingdate              String?
  Endingdate                String?
  recommended               Boolean
  isvisible                 Boolean             @default(true)
  isvisiblePopularTours     Boolean             @default(false)
  isvisibleReccomendedTours Boolean             @default(false)
  isVendorTour              Boolean             @default(false)
  vendorUid                 String?
  coupons                   Coupon[]            @relation("Coupon")
  tourpricing               TourPricing?
  city                      City                @relation(fields: [cityId], references: [id], onDelete: Cascade)
  vendor                    Roles?              @relation(fields: [vendorUid], references: [uid])
  tourdetails               Tourstaticdatabyid?  
  favorites                 FavoriteTour[] 
  bookingDetail             BookingDetail[]     @relation("TourBookings" )

  @@index([cityId], map: "Tourstaticdata_cityId_fkey")
  @@index([vendorUid], map: "Tourstaticdata_vendorUid_fkey")
}

model Tourstaticdatabyid {
  id                   Int            @id @default(autoincrement())
  countryId            Int
  countryName          String
  continent            String
  cityId               Int
  cityName             String
  tourName             String         @unique
  duration             String
  imagePath            String
  cityTourTypeId       String
  cityTourType         String
  tourDescription      String         @db.LongText
  tourInclusion        String         @db.LongText
  tourShortDescription String         @db.LongText
  importantInformation String         @db.LongText
  itenararyDescription String         @db.LongText
  usefulInformation    String         @db.LongText
  startTime            String
  googleMapUrl         String?
  Bookable             Boolean        @default(true)
  tourExclusion        String?
  TourId               Int            @unique
  cutOffhrs            Int?           @default(96)
  vendorUid            String?
  isVendorTour         Boolean        @default(false)
  tourImages           TourImagess[]
  tourOption           TourOption[]
  tourstaticdata       Tourstaticdata @relation(fields: [TourId], references: [tourId] ,onDelete: Cascade)
  faq                  Faq[]
}

model Faq {
  id                 Int                @id @default(autoincrement())
  tourid             Int
  question           String?
  answer             String             @db.LongText
  tourstaticdatabyid  Tourstaticdatabyid @relation(fields: [tourid], references: [TourId], onDelete: Cascade)

  @@index([tourid], map: "Faq_tourid_fkey")
}

model TourImagess {
  id                 Int                @id @default(autoincrement())
  tourId             Int
  imagePath          String
  tourstaticdatabyid Tourstaticdatabyid @relation(fields: [tourId], references: [TourId], onDelete: Cascade)

  @@index([tourId], map: "TourImagess_tourId_fkey")
}

model TourPricing {
  id       Int            @id @default(autoincrement())
  tourId   Int          @unique
  amount   Float
  discount Float?
  tour     Tourstaticdata @relation(fields: [tourId], references: [tourId], onDelete: Cascade)
}

model TourOption {
  id                            Int                @id @default(autoincrement())
  tourId                        Int
  optionName                    String
  childAge                      String
  infantAge                     String
  optionDescription             String
  minPax                        Int
  maxPax                        Int
  isWithoutTransfers            Boolean            @default(true)
  isSharingTransfer             Boolean            @default(true)
  isPrivateTransfer             Boolean            @default(true)
  isPrivateBoatWithoutTransfers Boolean            @default(true)
  isPvtYachtWithoutTransfers    Boolean            @default(true)
  tourOptionId                  Int                @unique
  operationDays                 OperationDay[]
  timeSlots                     TimeSlot[]
  tourStaticDataById            Tourstaticdatabyid @relation(fields: [tourId], references: [TourId], onDelete: Cascade)

  @@index([tourId], map: "TourOption_tourId_fkey")
}

model OperationDay {
  id           Int        @id @default(autoincrement())
  tourId       Int
  tourOptionId Int
  monday       Int
  tuesday      Int
  wednesday    Int
  thursday     Int
  friday       Int
  saturday     Int
  sunday       Int
  tourOption   TourOption @relation(fields: [tourOptionId], references: [tourOptionId], onDelete: Cascade)

  @@index([tourOptionId], map: "OperationDay_tourOptionId_fkey")
}

model Coupon {
  id       Int             @id @default(autoincrement())
  name     String
  discount Float
  type     String
  eventId  Int?
  tourId   Int?
  event    Eventdata?      @relation("Coupon", fields: [eventId], references: [id], onDelete: Cascade)
  tour     Tourstaticdata? @relation("Coupon", fields: [tourId], references: [tourId])

  @@index([eventId], map: "Coupon_eventId_fkey")
  @@index([tourId], map: "Coupon_tourId_fkey")
}

model Homepage {
  id                    Int     @id @default(autoincrement())
  detail                String  @db.LongText
  gridsectionheading    String
  gridsectionsubheading String
  heading1              String
  heading2              String
  heading3              String
  imagepath             String?
  subtitle              String  @db.LongText
  title                 String
  imagepath2            String?
  imagepath3            String?
}

model BackgroundImage {
  id              Int     @id @default(autoincrement())
  url             String
  isVisibleSlider Boolean @default(false)
}

model Aboutus {
  id          Int    @id @default(autoincrement())
  title       String
  imagepath   String
  imagepath2  String
  imagepath3  String
  heading1    String
  detail1     String
  heading2    String
  subheading2 String
  detail2     String
  subtitle    String
  text        String @db.LongText
}

model Eventdata {
  id            Int           @id @default(autoincrement())
  isVisible     Boolean       @default(true)
  isVisibleHome Boolean       @default(false)
  cityId        Int
  eventName     String
  duration      String
  imagePath     String
  eventType     String
  isSlot        Boolean
  onlyChild     Boolean
  vendorUid     String?
  recommended   Boolean
  eventdetailid Int?          @unique
  coupons       Coupon[]      @relation("Coupon")
  eventdetail   EventDetail[]
  city          City          @relation(fields: [cityId], references: [id], onDelete: Cascade)
  vendor        Roles?        @relation(fields: [vendorUid], references: [uid])

  @@index([cityId], map: "Eventdata_cityId_fkey")
  @@index([vendorUid], map: "Eventdata_vendorUid_fkey")
}

model EventDetail {
  id              Int           @id @default(autoincrement())
  eventName       String
  eventdetailid   Int
  description     String        @db.LongText
  date            DateTime
  location        String
  googlemapurl    String
  minage          String
  moreinfo        String        @db.LongText
  ticketinfo      String        @db.LongText
  artistname      String
  artistimage     String
  lastbookingtime DateTime
  eventSelling    Boolean
  ischildallowed  Boolean
  isadultallowed  Boolean
  isinfantallowed Boolean
  duration        String
  vendorUid       String?
  eventdata       Eventdata     @relation(fields: [eventdetailid], references: [id], onDelete: Cascade)
  images          EventImages[]
  eventoptions    EventOption[]

  @@index([eventdetailid], map: "EventDetail_eventdetailid_fkey")
}

model EventOption {
  id                Int              @id @default(autoincrement())
  eventId           Int
  optionname        String
  adultprice        String
  childprice        String
  infantprice       String
  optiondescription String           @db.LongText
  available         String
  eventdetail       EventDetail      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  timeslots         EventTimeSlots[]

  @@index([eventId], map: "EventOption_eventId_fkey")
}

model EventTimeSlots {
  id            Int         @id @unique @default(autoincrement())
  eventOptionId Int
  timeSlot      String
  available     String
  adultPrice    String
  childPrice    String
  eventoption   EventOption @relation(fields: [eventOptionId], references: [id], onDelete: Cascade)

  @@index([eventOptionId], map: "EventTimeSlots_eventOptionId_fkey")
}

model EventImages {
  id            Int         @id @default(autoincrement())
  imagePath     String
  eventDetailId Int
  eventdetail   EventDetail @relation(fields: [eventDetailId], references: [id], onDelete: Cascade)

  @@index([eventDetailId], map: "EventImages_eventDetailId_fkey")
}

model EventTypes {
  id        Int    @id @default(autoincrement())
  eventtype String @unique
}

model Roles {
  id                    Int              @id @default(autoincrement())
  uid                   String           @unique
  username              String
  isAdmin               Boolean          @default(true)
  isVendor              Boolean          @default(true)
  email                 String           @unique
  address               String
  age                   Int
  name                  String
  isApproved            Boolean          @default(false)
  country               String
  city                  String
  services_description  String
  mobile                String
  vatDocument           String?
  bankDocument          String?
  document_tradelicense String
  document_other        String
  created_at            DateTime         @default(now())
  CompanyNumber         String
  BookingDetail         BookingDetail[]
  Eventdata             Eventdata[]
  tours                 Tourstaticdata[]
}

model StripeApi {
  id                Int    @id @default(autoincrement())
  secretapikey      String @db.LongText
  publishableapikey String @db.LongText
}

model Emailtemplate {
  id      Int    @id @default(autoincrement())
  subject String @db.LongText
  body    String @db.LongText
}

model ContactUs {
  id           Int    @id @default(autoincrement())

  Address      String
  mobilenumber String
  Email        String
 
}

model Footer {
  id              Int    @id @default(autoincrement())
  logourl         String
  title1          String
  paymentimage    String
  copyright       String
  socialimage1    String
  socialimage2    String
  socialimage3    String
  socialimage4    String
  socialimageurl1 String
  socialimageurl2 String
  socialimageurl3 String
  socialimageurl4 String
}

model Experiences {
  id        Int    @id @default(autoincrement())
  heading   String
  imagepath String
}

model FormSubmission {
  id           Int    @id @default(autoincrement())
  name         String
  email        String
  message      String
  
}

model TransferTypes {
  id           Int    @unique @default(autoincrement())
  transferName String
  transferId   Int
}

model UserItinarary {
  id        Int            @id @default(autoincrement())
  userId    Int
  name      String
  tourslist FavoriteTour[] // Defining a one-to-many relationship (a user itinerary can have many favorite tours)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade) // Linking to the User model
}

model FavoriteTour {
  id          Int            @id @default(autoincrement())
  userId      Int
  tourId      Int
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tour        Tourstaticdata @relation(fields: [tourId], references: [id], onDelete: Cascade)
  itineraryId Int?
  itinerary   UserItinarary? @relation(fields: [itineraryId], references: [id], onDelete: Cascade) // Linking to UserItinarary
  @@unique([userId, tourId, itineraryId])
}

model Blogs {
  id        Int      @id @default(autoincrement())
  imagePath String  
  title     String
  content   String   @db.Text
  createdAt DateTime @default(now())
}
model Policy{
id        Int      @id @default(autoincrement())
content   String   @db.Text
}